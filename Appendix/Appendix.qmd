# Appendix

## Data-import: base-r vs `readr` {#sec-readr}


Our reasons for preferring `readr` over base-R import functions:

1. ~~base `R` imports strings as factors by default~~ (since R 4.0.0, this is not the case anymore)
2. `readr` is generally faster (which only matters if you have a large dataset)
3. `readr` makes safer assumptions about your data (e.g. the default timezone for datetime columns is UTC)
4. `data.frames` created by `readr` are prettier when printed to the console and contain more information using less characters

**HOWEVER**: Using external libraries (such as `readr`) creates additional dependencies which has it's own downsides (which is one of the reasons we don't do `library("tidyverse")`). 



## Committing files with git


:::{#nte-committing .callout-note}
## Committing files with git

1. Save your (R/RMarkdown/Quarto) file
2. Switch to the "Git"-Tab in the pane in the top right corner
3. Click "commit" to open the "Commit Window"
4. Click in the checkbox next to the file(s) you want to commit
5. Add a commit message to explain what you are committing (e.g. "`initial commit`")
6. Click on "commit" to commit your changes
:::


## Mapmatching GPS points to the road network



```{r}
#| message: false




library(sf)
library(tmap)

# Get a sample road dataset
HighWays <- read_sf(system.file("sqlite/test3.sqlite",package="sf"), "HighWays")[6, ] 

# since we want to find the closest location on the road over ALL roads
# we need to create a union of the roads first.
HighWays <- st_union(HighWays)

# Let's simulate 1000 GPS locations within 3km of the highway
gps_locations <- HighWays |> st_buffer(3000) |> st_sample(100)

# Now we can get the nearset point for each GPS location
nearest <- st_nearest_points(gps_locations, HighWays)

# The output is a line for each point (see plot below)
# Now we need convert the output from LINE to POINT. 
# This doubles the number of features
near_p <- st_cast(nearest, "POINT")

# now we subset the points. Uneven numbers are the original
# points, even numbers are the new, mapmatched points.
near_from <- near_p[c(TRUE, FALSE)]
near_to <- near_p[c(FALSE,TRUE)]
```


```{r}
#| fig-cap: Original Points (black) are matched to the closest point on the road (red)
tm_shape(HighWays) + tm_lines() +
  tm_shape(nearest) + tm_lines(lty = 3) +
  tm_shape(near_from) + tm_dots() +
  tm_shape(near_to) + tm_dots(col = "red")
```



## Exporting location data from Google via Takeout

If you only recently enabled the Google timeline, follow the instructions further down below for downloading data from your mobile device. Otherwise, a simple way to download your location data from Google is described in the following steps:

1. Go to [takeout.google.com](https://takeout.google.com/)
2. Deselect all "Products" and select only the following product: *Location History (Timeline)*
4. Click *Next* and *Create Export* to get an Export of your data (see @fig-google-takeout)
5. Download and extract the data in your R-Project folder. If you do not see a file "Records.json" in the list, this approach to exporting data won't work, because your data is stored locally on the device. You need to get it from there. Follow the explanations below (download from mobile device).
6. Follow the script below (adjust the path!)


```{.r}
library(sf)
library(jsonlite)
library(dplyr)
records_json <- jsonlite::read_json("takeout-20240501T094208Z-001/Takeout/Location History (Timeline)/Records.json",simplifyVector = TRUE)

records <- records_json[[1]]

# inspired by the following SO-answer
# https://gis.stackexchange.com/a/319067/40929
records_sf <- records |> 
  mutate(
    lat = latitudeE7/1e7,
    lon = longitudeE7/1e7
  ) |> 
  st_as_sf(coords = c("lon", "lat"), crs = 4326)
```



![](../02_Images/google-takeout.png){#fig-google-takeout}

## Exporting location data from Google via download from your mobile device

Follow these [instructions](https://support.google.com/maps/thread/264641290/export-full-location-timeline-data-in-json-or-similar-format-in-the-new-version-of-timeline?hl=en).
