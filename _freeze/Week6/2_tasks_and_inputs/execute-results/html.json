{
  "hash": "8bcbc244cc1f73e33496d226a1cc5377",
  "result": {
    "engine": "knitr",
    "markdown": "## Tasks and Inputs\n\n\n\nOpen your RStudio Project [which you prepared](#w6-preperation) for this week. Create a new RScript and import the libraries we need for this week. Import your wild boar dataset `wildschwein_BE_2056.csv` (on moodle) as an `sf` object\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(\"readr\")\nlibrary(\"sf\")\n\n\nwildschwein_BE <- read_delim(\"datasets/wildschwein_BE_2056.csv\", \",\") |>\n    st_as_sf(coords = c(\"E\", \"N\"), crs = 2056, remove = FALSE)\n```\n:::\n\nDownload the dataset `Feldaufnahmen_Fanel.gpkg` (on moodle) and save it to your project folder. This is a vector dataset stored in the filetype *Geopackage*, which is similar to a *Shapefile*, with some advantages (see the website [shapefile must die](http://switchfromshapefile.org/)).\n\nAlso download the dataset `vegetationshoehe_LFI.tif` (on moodle) and store it in your project folder. This is a *raster* dataset stored in a Geotiff. \n\n\n### Tasks 1: Import and visualize spatial data\n\nSince `Feldaufnahmen_Fanel.gpkg` is a vector dataset, you can import it using `read_sf()`. Explore this dataset in R to answer the following questions: \n\n- What information does the dataset contain? \n- What is the geometry type of the dataset (possible types are: Point, Lines and Polygons)?\n- What are the data types of the other columns?\n- What is the coordinate system of the dataset?\n\n\n\n### Task 2: Annotate Trajectories from vector data {#w6-annotate-vector}\n\nWe would like to know what crop was visited by which wild boar, and at what time. Since the crop data is most relevant in summer, filter your wild boar data to the months **may to june** first and save the output to a new variable. Overlay the filtered dataset with your `fanel` data to verify the spatial overlap.\n\nTo sematically annotate each wild boar location with crop information, you can use a *spatial join* with the function `st_join()`. Do this and explore your annotated dataset. \n\n\n\n\n### Task 3: Explore annotated trajectories\n\nThink of ways you could visually explore the spatio-temporal patterns of wild boar in relation to the crops. In our example below we visualize the percentage of samples in a given crop per hour.\n\n::: {.cell}\n::: {.cell-output-display}\n![Percentages of samples in a given crop per hour. Only showing the most common categories](2_tasks_and_inputs_files/figure-html/fig-crop-1.png){#fig-crop width=672}\n:::\n:::\n\n### Task 4: Import and visualize vegetationindex (raster data)\n\nIn terms of raster data, we have prepared the [Vegetation Height Model](https://map.geo.admin.ch/index.html?zoom=7&lang=en&topic=ech&bgLayer=ch.swisstopo.pixelkarte-grau&layers_opacity=0.5&layers=ch.bafu.landesforstinventar-vegetationshoehenmodell&E=2570723.63&N=1205388.11) provided by the Swiss National Forest Inventory (NFI). This dataset contains high resolution information (1x1 Meter) on the vegetation height, which is determined from the difference between the digital surface models DSM and the digital terrain model by swisstopo (swissAlti3D). Buildings are eliminated using a combination of the ground areas of the swisstopo topographic landscape model (TLM) and spectral information from the stereo aerial photos. \n\nImport this dataset using the function `rast` from the package `terra`.\nVisualize the raster data using the base `plot` function and `tmap`. We do not recommend using `ggplot2` in this case, as is *very* slow with raster data.\n\n\n\n### Task 5: Annotate Trajectories from raster data\n\nSemantically annotate your wild boar locations with the vegetation index (similar as you did with the crop data in [Task 2](#w6-annotate-vector)). Since you are annotating a vector dataset with information from a raster dataset, you cannot use `st_join` but need the function `extract` from the `terra` package. Read the help on the `extract` function to see what the function expects. The output should look something like this:\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\nSimple feature collection with 51246 features and 3 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 2568153 ymin: 1202306 xmax: 2575154 ymax: 1207609\nProjected CRS: CH1903+ / LV95\nFirst 10 features:\n   TierID         DatetimeUTC vegetationshoehe_LFI                geometry\n1    002A 2014-08-22 21:00:12                20.09 POINT (2570409 1204752)\n2    002A 2014-08-22 21:15:16                23.85 POINT (2570402 1204863)\n3    002A 2014-08-22 21:30:43                24.96 POINT (2570394 1204826)\n4    002A 2014-08-22 21:46:07                21.59 POINT (2570379 1204817)\n5    002A 2014-08-22 22:00:22                15.68 POINT (2570390 1204818)\n6    002A 2014-08-22 22:15:10                23.77 POINT (2570390 1204825)\n7    002A 2014-08-22 22:30:13                25.09 POINT (2570387 1204831)\n8    002A 2014-08-22 22:45:11                24.88 POINT (2570381 1204840)\n9    002A 2014-08-22 23:00:27                29.91 POINT (2570316 1204935)\n10   002A 2014-08-22 23:15:41                21.52 POINT (2570393 1204815)\n```\n\n\n:::\n:::\n\nYou can now explore the spatio-temporal patterns of this new data, similarly to as we did in @fig-crop.\n\n\n\n<!-- ### Submission\n\nTo submit your exercise, provide us with the URL of your Github repo as described [in the preperation](#sec-github-repo-2). -->\n",
    "supporting": [
      "2_tasks_and_inputs_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}