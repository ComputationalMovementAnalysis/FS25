{
  "hash": "fe787134d14ba91b614d20a5f49dc19b",
  "result": {
    "engine": "knitr",
    "markdown": "## Solutions\n\n:::{.callout-tip}\nHover over the code and copy the content by clicking on the clipboard icon on the top right. You can now paste this into an R-Script.\n:::\n\n### Exercise A\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```{.sourceCode .r}\n# task_1.R\n################################################################################\n\n\nlibrary(\"readr\")\nlibrary(\"sf\")\n\nwildschwein_BE <- read_delim(\"datasets/wildschwein_BE_2056.csv\", \",\")\n\nwildschwein_BE <- st_as_sf(wildschwein_BE, coords = c(\"E\", \"N\"), crs = 2056)\n\n\n\n\n# task_2.R\n################################################################################\n\n\nlibrary(\"dplyr\")      # move this to the top of your script\nlibrary(\"lubridate\")  # move this to the top of your script\nlibrary(\"ggplot2\")    # move this to the top of your script\n\nggplot(wildschwein_BE, aes(DatetimeUTC, TierID)) +\n  geom_line()\n\n\ndifftime_secs <- function(x, y){\n  as.numeric(difftime(x, y, units = \"secs\"))\n}\n\n\nwildschwein_BE <- wildschwein_BE |>\n  mutate(timelag = difftime_secs(lead(DatetimeUTC), DatetimeUTC))\n\n\n\nggplot(wildschwein_BE, aes(timelag)) +\n  geom_histogram(binwidth = 50) +\n  scale_x_continuous(limits = c(0, 15000)) +\n  scale_y_log10()\n\n\nwildschwein_BE |>\n  filter(year(DatetimeUTC) == 2014) |>\n  ggplot(aes(DatetimeUTC, timelag, colour = TierID)) +\n  geom_line() +\n  geom_point()\n\n\n\n\n# task_3.R\n################################################################################\n\n\ndistance_by_element <- function(x, y){\n  as.numeric(\n    st_distance(x, y, by_element = TRUE)\n  )\n}\n\nwildschwein_BE <- wildschwein_BE |>\n  group_by(TierID) |>\n  mutate(\n    steplength = distance_by_element(lead(geometry), geometry)\n  )\n\n\n\n\n# task_4.R\n################################################################################\n\n\nwildschwein_BE <- wildschwein_BE |>\n  group_by(TierID) |>\n  mutate(\n    speed = steplength/timelag\n  )\n```\n\n\n:::\n:::\n\n### Exercise B\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```{.sourceCode .r}\n# task_1.R\n################################################################################\n\n\ncaro <- caro |>\n  mutate(\n    timelag = difftime_secs(lead(DatetimeUTC), lag(DatetimeUTC)),\n    steplength = distance_by_element(lead(geometry), lag(geometry)),\n    speed = steplength / timelag\n  )\n\n\n\n\n# task_2.R\n################################################################################\n\n\n\ncaro <- caro |>\n  mutate(\n    timelag2 = difftime_secs(lead(DatetimeUTC,2), lag(DatetimeUTC,2)),\n    steplength2 = distance_by_element(lead(geometry,2), lag(geometry,2)),\n    speed2 = steplength2 / timelag2\n  )\n\n\n\n\n# task_3.R\n################################################################################\n\n\n\ncaro <- caro |>\n  mutate(\n    timelag3 = difftime_secs(lead(DatetimeUTC,4), lag(DatetimeUTC,4)),\n    steplength3 = distance_by_element(lead(geometry,4), lag(geometry,4)),\n    speed3 = steplength3 / timelag3\n  )\n```\n\n\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}