{
  "hash": "e00e81fc9d27a8c9cec95b81742d8ecd",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Demo: R Functions\"\n---\n\n\nUp to now, we have used a variety of different functions designed by other developers. Sometimes we need to execute an operation multiple times, and most often it is reasonable to write a function to do so. Whenever you have copied and pasted a block of code more than twice, you should consider writing a function [@wickham2023]. \n\nThe first step in writing a function, is picking a name and assigning `<- function(){}` to it.\n\n::: {.cell}\n\n```{.r .cell-code}\ntestfun <- function() {}\n```\n:::\n\nTo run the function, we have to call the assigned name with the brackets. The function `testfun` gives no output, which is why we get `NULL` back. \n\n::: {.cell}\n\n```{.r .cell-code}\ntestfun()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nNULL\n```\n\n\n:::\n\n```{.r .cell-code}\nclass(testfun)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"function\"\n```\n\n\n:::\n:::\n\nTo make the function actually *do* something, we need to specify *what* should be done within the curly brackets `{}`. The following function always prints the same statement and accepts no input values:\n\n::: {.cell}\n\n```{.r .cell-code}\ntestfun <- function() {\n    print(\"this function does nothing\")\n}\n\ntestfun()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"this function does nothing\"\n```\n\n\n:::\n:::\n\nIf we want the function to accept some input values, we have to define them within the round brackets. For example, I specify a variable named `sometext` and can call this variable within the execution.\n\n::: {.cell}\n\n```{.r .cell-code}\ntestfun <- function(sometext) {\n    print(sometext)\n}\n\ntestfun(sometext = \"this function does slightly more, but still not much\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"this function does slightly more, but still not much\"\n```\n\n\n:::\n:::\n\n:::{.callout-note collapse=\"true\"}\n\n::: {.cell}\n\n```{.r .cell-code}\ntestfun <- function(sometext) {\n    print(sometext)\n}\n```\n:::\n\nNote that since R Version 4.1, the above syntax can also be written as follows:\n\n::: {.cell}\n\n```{.r .cell-code}\ntestfun <- \\(sometext){\n    print(sometext)\n}\n```\n:::\n\nor even more compact:\n\n::: {.cell}\n\n```{.r .cell-code}\ntestfun <- \\(sometext) print(sometext)\n```\n:::\n\n:::\n\nLet's take a more practical example. Say we want a function that calculates our age if provided with the date of our birthday. We can use `Sys.time()` to provide today's date and `difftime()` to calculate the time difference between today and our birthday.\n\n::: {.cell}\n\n```{.r .cell-code}\nmy_age <- function(birthday, output_unit) {\n    difftime(Sys.time(), birthday, units = output_unit)\n}\n\nmy_age(birthday = \"1997-04-23\", output_unit = \"days\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nTime difference of 10206.26 days\n```\n\n\n:::\n:::\n\nAs we already know from using other functions, if we declare our variables in the order that we initially listed them, we do not need to specify the parameters (no need of `birthday = ` and `output_unit =`).\n\n::: {.cell}\n\n```{.r .cell-code}\nmy_age(\"1997-04-23\", \"days\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nTime difference of 10206.26 days\n```\n\n\n:::\n:::\n\nIf we want any of our parameters to have default value, we can assign an initial value to the parameter when declaring the variables within the round brackets.\n\n::: {.cell}\n\n```{.r .cell-code}\nmy_age <- function(birthday, output_unit = \"days\") {\n    difftime(Sys.time(), birthday, units = output_unit)\n}\n\n# if not stated otherwise, our function uses the unit \"days\"\nmy_age(\"1997-04-23\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nTime difference of 10206.26 days\n```\n\n\n:::\n\n```{.r .cell-code}\n# We can still overwrite units\nmy_age(\"1997-04-23\", \"hours\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nTime difference of 244950.2 hours\n```\n\n\n:::\n:::\n\nAll you need to do now is run execute the function deceleration (`myage <- function...` etc.) at the beginning of your script, and you can use the function for your entire R session. \n\n:::{.callout-important}\nAlways try to make your function self sufficient: Only use objects within your function that are either passed as function arguments or created within the funtion. See more on this topic [here](https://raps-with-r.dev/fprog.html#referentially-transparent-and-pure-functions), in the online version of the book by @rodrigues2023.\n:::\n\n\n<!-- Todo: inlucd browser() (only for rscripts) --> \n\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}